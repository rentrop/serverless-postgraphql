service: serverless-postgraphql-floods

provider:
  name: aws
  runtime: nodejs4.3
  # profile: reportingtool
  # region: eu-central-1

package:
  exclude:
    - populateDB/**

functions:
  graphql:
    handler: handler.graphql
    events:
      - http:
          method: post
          path: graphql
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "query" : "$util.escapeJavaScript($input.path('$.query'))",
                  "variables" : $input.json('$.variables'),
                  "operationName" : "$util.escapeJavaScript($input.path('$.operationName'))",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }
              application/graphql: |
                {
                  "query" : "$util.escapeJavaScript($input.body)",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }
      - http:
          method: get
          path: graphql
          integration: lambda
          cors: true
          request:
            parameters:
              querystrings:
                query: true
                variables: false
                operationName: false
              headers:
                Authorization: false
            template:
              application/json: |
                {
                  "query" : "$util.escapeJavaScript($input.params('query'))",
                  "variables" : "$util.escapeJavaScript($input.params('variables'))",
                  "operationName" : "$util.escapeJavaScript($input.params('operationName'))",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }

    environment:
      PGCON: ${env:PGRUNCON}
      JWT_SECRET: keyboard_kitten

# For a pgDB inside a VPC look e.g. here:
# http://www.stojanveselinovski.com/blog/2016/01/12/simple-postgresql-rds-cloudformation-template/
resources:
 Resources:
  pgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acess to Postgre
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: 0.0.0.0/0

  pgDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: "floods"
      AllocatedStorage: 5
      DBInstanceClass: "db.t2.micro"
      Engine: "postgres"
      EngineVersion: "9.5.4"
      MasterUsername: "example"
      MasterUserPassword: "serverless"
      VPCSecurityGroups:
      - Fn::GetAtt:
        - pgSecurityGroup
        - GroupId
      Tags:
        -
          Key: "Name"
          Value: "floods"
    DeletionPolicy: "Snapshot"
 Outputs:
    pgEndpoint:
      Description: "JDBC connection string for database"
      Value:
        Fn::GetAtt:
          - pgDB
          - Endpoint.Address
